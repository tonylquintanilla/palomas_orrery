import numpy as np
import math
import plotly.graph_objs as go
from planet_visualization_utilities import (MARS_RADIUS_AU, create_sphere_points, create_magnetosphere_shape)
from shared_utilities import create_sun_direction_indicator

# Mars Shell Creation Functions

mars_inner_core_info = (
            "A Solid Inner Core: Based on seismic data from the InSight lander, scientists have strong evidence that Mars \n" 
            "possesses a solid inner core. This inner core is primarily composed of iron and nickel, similar to Earth's."
)

def create_mars_inner_core_shell(center_position=(0, 0, 0)):
    """Creates Mars's inner core shell."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 0.5,  # Inner core: 0-50% of Mars's radius
        'color': 'rgb(255, 180, 140)',  # Orange-red for hot iron core
        'opacity': 1.0,
        'name': 'Inner Core',
        'description': (
            "A Solid Inner Core: Based on seismic data from the InSight lander, scientists have strong evidence that Mars <br>" 
            "possesses a solid inner core. This inner core is primarily composed of iron and nickel, similar to Earth's.<br><br>"
            "The differentiation into a solid inner core and a liquid outer core is primarily driven by:<br>"
            "* Temperature Gradient: The temperature increases significantly as you move towards the center of the planet. <br>" 
            "  The very high pressure at the center raises the melting point of the metallic core material. The inner core <br>" 
            "  is where the pressure exceeds the melting point at that temperature, forcing the metal into a solid state. <br>" 
            "  The outer core is still hot enough to be liquid at the prevailing pressures.<br>"
            "* Compositional Differences: The presence of lighter elements in the outer core also contributes to its lower <br>" 
            "  melting point compared to the purer iron-nickel of the inner core.<br>"
            "* Differences from Earth's Core:"
            "  * Size: Mars' core is proportionally larger relative to the planet's overall size compared to Earth's core.<br>"
            "  * Density: The lower overall density of Mars suggests that its core likely contains a higher percentage of <br>" 
            "    lighter elements than Earth's core.<br>" 
            "  * Lack of a Global Dynamo (Currently): Earth's liquid outer core is convecting, which, along with the planet's <br>" 
            "    rotation, generates our global magnetic field (the geodynamo). The fact that Mars currently lacks a global <br>" 
            "    magnetic field suggests that the convection in its liquid outer core is either absent, very weak, or organized <br>" 
            "    differently. This could be due to its smaller size, different cooling history, or the higher abundance of <br>" 
            "    lighter elements affecting its fluid dynamics.<br>" 
            "The precise composition and dynamics of these layers are still subjects of ongoing research and analysis of data.<br><br>" 
            "Past Magnetosphere: Scientists believe that early in its history, Mars did possess a global magnetic field, <br>" 
            "much like Earth's. This would have created a significant magnetosphere, deflecting much of the solar wind and <br>" 
            "cosmic radiation. However, unlike Earth, Mars lost its global magnetic field billions of years ago. The exact <br>" 
            "reasons are still being investigated, but theories involve the cooling and solidification of its iron core, which <br>" 
            "would have stopped the dynamo process that generates a global magnetic field. Today, Mars doesn't have a planet-wide <br>" 
            "magnetosphere generated by a global magnetic field. However, the Mars Global Surveyor mission discovered strong, <br>" 
            "localized magnetic fields embedded in certain regions of the Martian crust, particularly in the ancient southern <br>" 
            "highlands. These are remnants of the early global field. These localized fields can create small, localized <br>" 
            "magnetospheres, but they don't provide planet-wide protection like Earth's magnetosphere."
        )
    }
    
    # Calculate radius in AU
    layer_radius = layer_info['radius_fraction'] * MARS_RADIUS_AU
    
    # Create sphere points
    x, y, z = create_sphere_points(layer_radius, n_points=50)
    
    # Apply center position offset
    center_x, center_y, center_z = center_position
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    traces = [
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=4.0,
                color=layer_info['color'],
                opacity=layer_info['opacity']
            ),
            name=f"Mars: {layer_info['name']}",
            text=[layer_info['description']] * len(x),
            customdata=[f"Mars: {layer_info['name']}"] * len(x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    ]
    
    return traces

mars_outer_core_info = (
            "A Liquid Outer Core: Surrounding the solid inner core is believed to be a liquid outer core, also primarily \n" 
            "made of iron and nickel, but likely containing a significant amount of lighter elements like sulfur, oxygen, \n" 
            "or even hydrogen. The presence of these lighter elements would lower the melting point of the iron-nickel alloy, \n" 
            "allowing it to remain liquid despite the pressure."
)

def create_mars_outer_core_shell(center_position=(0, 0, 0)):
    """Creates Mars's outer core shell."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 0.8,  # Outer core: 50-80% of Mars's radius
        'color': 'rgb(255, 140, 0)',  # Deeper orange for liquid metal
        'opacity': 0.8,
        'name': 'Outer Core',
        'description': (
            "A Liquid Outer Core: Surrounding the solid inner core is believed to be a liquid outer core, also primarily <br>" 
            "made of iron and nickel, but likely containing a significant amount of lighter elements like sulfur, oxygen, <br>" 
            "or even hydrogen. The presence of these lighter elements would lower the melting point of the iron-nickel alloy, <br>" 
            "allowing it to remain liquid despite the pressure.<br><br>"
            "The differentiation into a solid inner core and a liquid outer core is primarily driven by:<br>"
            "* Temperature Gradient: The temperature increases significantly as you move towards the center of the planet. <br>" 
            "  The very high pressure at the center raises the melting point of the metallic core material. The inner core <br>" 
            "  is where the pressure exceeds the melting point at that temperature, forcing the metal into a solid state. <br>" 
            "  The outer core is still hot enough to be liquid at the prevailing pressures.<br>"
            "* Compositional Differences: The presence of lighter elements in the outer core also contributes to its lower <br>" 
            "  melting point compared to the purer iron-nickel of the inner core.<br>"
            "* Differences from Earth's Core:"
            "  * Size: Mars' core is proportionally larger relative to the planet's overall size compared to Earth's core.<br>"
            "  * Density: The lower overall density of Mars suggests that its core likely contains a higher percentage of <br>" 
            "    lighter elements than Earth's core.<br>" 
            "  * Lack of a Global Dynamo (Currently): Earth's liquid outer core is convecting, which, along with the planet's <br>" 
            "    rotation, generates our global magnetic field (the geodynamo). The fact that Mars currently lacks a global <br>" 
            "    magnetic field suggests that the convection in its liquid outer core is either absent, very weak, or organized <br>" 
            "    differently. This could be due to its smaller size, different cooling history, or the higher abundance of <br>" 
            "    lighter elements affecting its fluid dynamics.<br>" 
            "The precise composition and dynamics of these layers are still subjects of ongoing research and analysis of data."
        )
    }
    
    # Calculate radius in AU
    layer_radius = layer_info['radius_fraction'] * MARS_RADIUS_AU
    
    # Create sphere points
    x, y, z = create_sphere_points(layer_radius, n_points=50)
    
    # Apply center position offset
    center_x, center_y, center_z = center_position
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    traces = [
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=3.7,
                color=layer_info['color'],
                opacity=layer_info['opacity']
            ),
            name=f"Mars: {layer_info['name']}",
            text=[layer_info['description']] * len(x),
            customdata=[f"Mars: {layer_info['name']}"] * len(x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    ]
    
    return traces

mars_mantle_info = (
            "Mantle: Surrounding the core is a silicate mantle, similar to Earth's. It's composed of dense rocks rich in \n" 
            "elements like silicon, oxygen, iron, and magnesium."
)

def create_mars_mantle_shell(center_position=(0, 0, 0)):
    """Creates Mars's mantle shell."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 0.98,  # Upper mantle: 80-98% of Mars's radius
        'color': 'rgb(205, 85, 85)',  # Lighter reddish-brown
        'opacity': 0.6,
        'name': 'Mantle',
        'description': (
            "Mantle: Surrounding the core is a silicate mantle, similar to Earth's. It's composed of dense rocks rich in <br>" 
            "elements like silicon, oxygen, iron, and magnesium. While \"upper mantle\" isn't a formal layer name in the <br>" 
            "same way as Earth's, scientists do discuss different regions within the mantle based on mineral phase transitions <br>" 
            "that occur at different depths and pressures. For example, there might be an upper and lower transition zone <br>" 
            "within the mantle, similar in concept to Earth's, although the specific minerals and depths would differ due to <br>" 
            "Mars' unique composition and internal pressures."
        )
    }
    
    # Calculate radius in AU
    layer_radius = layer_info['radius_fraction'] * MARS_RADIUS_AU
    
    # Create sphere points
    x, y, z = create_sphere_points(layer_radius, n_points=50)
    
    # Apply center position offset
    center_x, center_y, center_z = center_position
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    traces = [
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=3.1,
                color=layer_info['color'],
                opacity=layer_info['opacity']
            ),
            name=f"Mars: {layer_info['name']}",
            text=[layer_info['description']] * len(x),
            customdata=[f"Mars: {layer_info['name']}"] * len(x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    ]
    
    return traces

mars_crust_info = (
            "Mars's crust: Mars has a crust, which is the outermost solid shell. Interestingly, recent findings from marsquakes \n" 
            "suggest that the Martian crust is significantly thicker than Earth's, perhaps averaging around 70 kilometers \n" 
            "(43 miles) or even thicker in some areas."
)

def create_mars_crust_shell(center_position=(0, 0, 0)):
    """Creates Mars's crust shell using Mesh3d for better performance with improved hover."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 1.0,  # Crust: 100% of Mars's radius
        'color': 'rgb(188, 39, 50)',  # Mars red
        'opacity': 1.0,
        'name': 'Crust',
        'description': (
            "Mars Crust<br>" 
            "(Note: toggle off the crust layer in the legend to better see the interior structure.)<br><br>" 
            "Mars has a crust, which is the outermost solid shell. Interestingly, recent findings from marsquakes <br>" 
            "suggest that the Martian crust is significantly thicker than Earth's, perhaps averaging around 70 kilometers <br>" 
            "(43 miles) or even thicker in some areas.<br><br>" 
            "Today, Mars doesn't have a planet-wide magnetosphere generated by a global magnetic field. However, the Mars Global <br>" 
            "Surveyor mission discovered strong, localized magnetic fields embedded in certain regions of the Martian crust, <br>" 
            "particularly in the ancient southern highlands. These are remnants of the early global field. These localized fields <br>" 
            "can create small, localized magnetospheres, but they don't provide planet-wide protection like Earth's magnetosphere."
        )
    }
    
    # Calculate radius in AU
    radius = layer_info['radius_fraction'] * MARS_RADIUS_AU
    
    # Unpack center position
    center_x, center_y, center_z = center_position
    
    # Create mesh with reasonable resolution for performance
    resolution = 24  # Reduced from typical 50 for markers
    
    # Create a UV sphere
    phi = np.linspace(0, 2*np.pi, resolution)
    theta = np.linspace(-np.pi/2, np.pi/2, resolution)
    phi, theta = np.meshgrid(phi, theta)
    
    x = radius * np.cos(theta) * np.cos(phi)
    y = radius * np.cos(theta) * np.sin(phi)
    z = radius * np.sin(theta)
    
    # Apply center position offset
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    # Create triangulation
    indices = []
    for i in range(resolution-1):
        for j in range(resolution-1):
            p1 = i * resolution + j
            p2 = i * resolution + (j + 1)
            p3 = (i + 1) * resolution + j
            p4 = (i + 1) * resolution + (j + 1)
            
            indices.append([p1, p2, p4])
            indices.append([p1, p4, p3])
    
    # Create main surface
    surface_trace = go.Mesh3d(
        x=x.flatten(), 
        y=y.flatten(), 
        z=z.flatten(),
        i=[idx[0] for idx in indices],
        j=[idx[1] for idx in indices],
        k=[idx[2] for idx in indices],
        color=layer_info['color'],
        opacity=layer_info['opacity'],
        name=f"Mars: {layer_info['name']}",
        showlegend=True,
        hoverinfo='none',  # Disable hover on mesh surface
        # Add these new parameters to make hover text invisible
        hovertemplate=' ',  # Empty template instead of None
        hoverlabel=dict(
    #        bgcolor='rgba(0,0,0,0)',  # Transparent background
            font=dict(
                color='rgba(0,0,0,0)',  # Transparent text
    #            size=0                  # Zero font size
            ),
            bordercolor='rgba(0,0,0,0)'  # Transparent border
        ), 
        # Add these new parameters to eliminate shading
        flatshading=True,  # Use flat shading instead of smooth
        lighting=dict(
            ambient=1.0,     # Set to maximum (1.0)
            diffuse=0.0,     # Turn off diffuse lighting
            specular=0.0,    # Turn off specular highlights
            roughness=1.0,   # Maximum roughness
            fresnel=0.0      # Turn off fresnel effect
        ),
        lightposition=dict(
            x=0,  # Centered light
            y=0,  # Centered light
            z=10000  # Light from very far above to minimize shadows
        )       
    )
        
    # Use the Fibonacci sphere algorithm for more even point distribution
    def fibonacci_sphere(samples=1000):
        points = []
        phi = math.pi * (3. - math.sqrt(5.))  # Golden angle in radians
        
        for i in range(samples):
            y = 1 - (i / float(samples - 1)) * 2  # y goes from 1 to -1
            radius_at_y = math.sqrt(1 - y * y)  # Radius at y
            
            theta = phi * i  # Golden angle increment
            
            x = math.cos(theta) * radius_at_y
            z = math.sin(theta) * radius_at_y
            
            points.append((x, y, z))
        
        return points
    
    # Generate fibonacci sphere points
    fib_points = fibonacci_sphere(samples=50)  # Originally, 50 hover points evenly distributed
    
    # Scale and offset the points
    x_hover = [p[0] * radius + center_x for p in fib_points]
    y_hover = [p[1] * radius + center_y for p in fib_points]
    z_hover = [p[2] * radius + center_z for p in fib_points]
        
    # Create a list of repeated descriptions for each point
    # This is crucial - we need exactly one text entry per point
    hover_texts = [layer_info['description']] * len(x_hover)

    # Just the name for "Object Names Only" mode
    layer_name = f"Mars: {layer_info['name']}"
    minimal_hover_texts = [layer_name] * len(x_hover)

    # Create hover trace with direct text assignment
    hover_trace = go.Scatter3d(
        x=x_hover, 
        y=y_hover, 
        z=z_hover,
        mode='markers',
        marker=dict(
            size=2,  # originally 5
            color='rgb(188, 39, 50)',  # Layer color, originally 'white'
            opacity=1.0,  # originally 0.8
            line=dict(  # Add a contrasting outline
                width=1,
                color='black'
            )
        ),
        name=f"Mars: {layer_info['name']} (Info)",
        text=hover_texts,  # IMPORTANT: Matching length with coordinate arrays
        customdata=minimal_hover_texts,  # For "Object Names Only" mode
        hovertemplate='%{text}<extra></extra>',  # Use the standard hover template
        showlegend=False  # Don't show in legend since it's just for hover
    )

    return [surface_trace, hover_trace]

mars_atmosphere_info = (
            "Atmosphere: Mars has a thin atmosphere, much less dense than Earth's. It's primarily composed of carbon dioxide \n" 
            "(about 95%), with small amounts of nitrogen, argon, and other gases."
)

def create_mars_atmosphere_shell(center_position=(0, 0, 0)):
    """Creates Mars's lower atmosphere shell."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 1.02,  # Troposphere
        'color': 'rgb(150, 200, 255)',  # Light blue for atmosphere
        'opacity': 0.5,
        'name': 'Lower Atmosphere',
        'description': (
            "Atmosphere: Mars has a thin atmosphere, much less dense than Earth's. It's primarily composed of carbon dioxide <br>" 
            "(about 95%), with small amounts of nitrogen, argon, and other gases.<br><br>" 
            "Scientists often divide the Martian atmosphere into layers based on temperature profiles, similar to Earth's <br>" 
            "atmosphere, although some layers are absent or behave differently:<br>" 
            "* Troposphere: This is the lowest layer, extending from the surface up to about 40-50 kilometers (25-31 miles). <br>" 
            "  Most of Mars' weather, like dust storms and convection, occurs here. The temperature generally decreases with altitude.<br>" 
            "* Mesosphere: Above the troposphere, extending from about 50 to 100 kilometers (31 to 62 miles). This layer has the <br>" 
            "  lowest temperatures in the Martian atmosphere as carbon dioxide efficiently radiates heat into space. Carbon dioxide <br>" 
            "  ice clouds have even been observed in the Martian mesosphere.<br>" 
            "* Thermosphere: Above the mesosphere, starting around 100 kilometers (62 miles) and extending to about 200 kilometers <br>" 
            "  (124 miles). This layer is heated by extreme ultraviolet radiation from the Sun, and temperatures increase with <br>" 
            "  altitude. However, it's still much colder than Earth's thermosphere."
        )
    }
    
    # Calculate radius in AU
    layer_radius = layer_info['radius_fraction'] * MARS_RADIUS_AU
    
    # Create sphere points
    x, y, z = create_sphere_points(layer_radius, n_points=50)
    
    # Apply center position offset
    center_x, center_y, center_z = center_position
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    traces = [
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=2.5,
                color=layer_info['color'],
                opacity=layer_info['opacity']
            ),
            name=f"Mars: {layer_info['name']}",
            text=[layer_info['description']] * len(x),
            customdata=[f"Mars: {layer_info['name']}"] * len(x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    ]
    
    return traces

mars_upper_atmosphere_info = (
            "Upper Atmosphere: Like Earth, Mars has upper atmospheric layers, including an ionosphere and exosphere, where \n" 
            "the atmosphere becomes very thin and interacts with solar radiation and the solar wind.\n\n" 
            "Exosphere: This is the outermost layer, starting above the thermosphere (around 200 km/124 miles) and gradually \n" 
            "thinning out into space. Atoms and molecules here are so far apart that they can escape the planet's gravity.\n\n" 
            "Interaction with Solar Wind: Without a global magnetosphere, the Martian atmosphere is directly exposed to the \n" 
            "solar wind, a stream of charged particles from the Sun. This interaction is believed to have played a significant \n" 
            "role in stripping away much of Mars' early, potentially thicker atmosphere and contributing to the loss of liquid \n" 
            "water on the surface. Unlike Earth, Mars lacks a stratosphere. On Earth, the stratosphere is characterized by a \n" 
            "temperature inversion due to the absorption of ultraviolet radiation by the ozone layer. Mars has a very thin \n" 
            "atmosphere and no significant ozone layer, so this distinct layer doesn't form."
)

def create_mars_upper_atmosphere_shell(center_position=(0, 0, 0)):
    """Creates Mars's upper atmosphere shell."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 1.06,  # Mesosphere, thermosphere, and exosphere
        'color': 'rgb(100, 150, 255)',  # Lighter blue
        'opacity': 0.3,
        'name': 'Upper Atmosphere',
        'description': (
            "Upper Atmosphere: Like Earth, Mars has upper atmospheric layers, including an ionosphere and exosphere, where <br>" 
            "the atmosphere becomes very thin and interacts with solar radiation and the solar wind.<br><br>" 
            "Exosphere: This is the outermost layer, starting above the thermosphere (around 200 km/124 miles) and gradually <br>" 
            "thinning out into space. Atoms and molecules here are so far apart that they can escape the planet's gravity.<br><br>" 
            "Interaction with Solar Wind: Without a global magnetosphere, the Martian atmosphere is directly exposed to the <br>" 
            "solar wind, a stream of charged particles from the Sun. This interaction is believed to have played a significant <br>" 
            "role in stripping away much of Mars' early, potentially thicker atmosphere and contributing to the loss of liquid <br>" 
            "water on the surface. Unlike Earth, Mars lacks a stratosphere. On Earth, the stratosphere is characterized by a <br>" 
            "temperature inversion due to the absorption of ultraviolet radiation by the ozone layer. Mars has a very thin <br>" 
            "atmosphere and no significant ozone layer, so this distinct layer doesn't form."
        )
    }
    
    # Calculate radius in AU
    layer_radius = layer_info['radius_fraction'] * MARS_RADIUS_AU
    
    # Create sphere points
    x, y, z = create_sphere_points(layer_radius, n_points=50)
    
    # Apply center position offset
    center_x, center_y, center_z = center_position
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    traces = [
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=2.0,
                color=layer_info['color'],
                opacity=layer_info['opacity']
            ),
            name=f"Mars: {layer_info['name']}",
            text=[layer_info['description']] * len(x),
            customdata=[f"Mars: {layer_info['name']}"] * len(x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    ]
    
    sun_traces = create_sun_direction_indicator(
        center_position=center_position, 
        shell_radius=layer_radius
    )
    for trace in sun_traces:
        traces.append(trace) 

    return traces

mars_magnetosphere_info = (
    "SET MANUAL SCALE TO AT LEAST 0.005 AU TO VISUALIZE.\n\n"
    "Unlike Earth, Mars lacks a global magnetic field generated by its core. Instead, it has:\n\n"
    "1. Induced Magnetosphere: Created by the interaction between the solar wind and Mars' ionosphere. "
    "It's much weaker and closer to the planet than Earth's magnetosphere, extending only about 1-2 Mars radii "
    "on the Sun-facing side.\n\n"
    "2. Bow Shock: Still forms where the solar wind first encounters Mars' atmosphere and ionosphere, "
    "but it's much closer to the planet (around 1.5 Mars radii).\n\n"
    "3. Crustal Magnetic Fields: Localized 'mini-magnetospheres' created by magnetized regions in Mars' crust, "
    "particularly in the southern hemisphere. These are remnants of Mars' ancient global magnetic field "
    "that existed billions of years ago."
)

def create_mars_magnetosphere_shell(center_position=(0, 0, 0)):
    """Creates Mars' induced magnetosphere and localized crustal magnetic fields."""
    traces = []
    
    # Parameters for Mars magnetosphere components (in Mars radii)
    params = {
        # Smaller, compressed sunward side
        'sunward_distance': 1.5,  # Much closer to Mars than Earth's
        
        # Smaller equatorial and polar extensions
        'equatorial_radius': 2.0,
        'polar_radius': 1.7,
        
        # Shorter magnetotail
        'tail_length': 10.0,  # Much shorter than Earth's
        'tail_base_radius': 2.5,
        'tail_end_radius': 4.0,
    }
    
    # Scale everything by Mars's radius in AU
    for key in params:
        params[key] *= MARS_RADIUS_AU
    
    # Create magnetosphere main shape - reusing Earth's function but with Mars parameters
    x, y, z = create_magnetosphere_shape(params)
    
    # Unpack center position
    center_x, center_y, center_z = center_position
    
    # 1. Add the main induced magnetosphere structure
    x = np.array(x) + center_x
    y = np.array(y) + center_y
    z = np.array(z) + center_z
    
    magnetosphere_text = [
                            "Unlike Earth, Mars lacks a global magnetic field generated by its core. Instead, it has:<br>"
                            "1. Induced Magnetosphere: Created by the interaction between the solar wind and Mars' ionosphere. <br>"
                            "   It's much weaker and closer to the planet than Earth's magnetosphere, extending only about 1-2 Mars radii <br>"
                            "   on the Sun-facing side.<br>"
                            "2. Bow Shock: Still forms where the solar wind first encounters Mars' atmosphere and ionosphere, <br>"
                            "   but it's much closer to the planet (around 1.5 Mars radii).<br>"
                            "3. Crustal Magnetic Fields: Localized 'mini-magnetospheres' created by magnetized regions in Mars' crust, <br>"
                            "   particularly in the southern hemisphere. These are remnants of Mars' ancient global magnetic field <br>"
                            "   that existed billions of years ago."
                 ]
    
    magnetosphere_customdata = ['Mars: Induced Magnetosphere']

    traces.append(
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=1.5,
                color='rgb(180, 180, 255)', # Light blue for magnetic field
                opacity=0.2
            ),
            name='Mars: Induced Magnetosphere',
            text=magnetosphere_text * len(x),
            customdata=magnetosphere_customdata * len(x),      
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    )
    
    # 2. Create and add bow shock
    bow_shock_x = []
    bow_shock_y = []
    bow_shock_z = []
    
    n_phi = 30
    n_theta = 30
    bow_shock_standoff = 1.5 * MARS_RADIUS_AU  # Closer to Mars than Earth's bow shock
    bow_shock_width = 3.0 * MARS_RADIUS_AU
    
    # Create a paraboloid for the bow shock
    for i_phi in range(n_phi):
        phi = (i_phi / (n_phi-1)) * np.pi  # Only the front half
        
        for i_theta in range(n_theta):
            theta = (i_theta / (n_theta-1)) * 2 * np.pi
            
            # Paraboloid shape, flattened in x-direction for bow shock
            x = -bow_shock_standoff * np.cos(phi)  # Negative for sunward direction
            rho = bow_shock_width * (1 + np.sin(phi)) / 2  # Wider for larger phi (away from sun)
            y = rho * np.cos(theta)
            z = rho * np.sin(theta)
            
            bow_shock_x.append(x)
            bow_shock_y.append(y)
            bow_shock_z.append(z)
    
    # Apply center position offset
    bow_shock_x = np.array(bow_shock_x) + center_x
    bow_shock_y = np.array(bow_shock_y) + center_y
    bow_shock_z = np.array(bow_shock_z) + center_z
    
    bow_shock_text = ["Mars Bow Shock: Forms where the supersonic solar wind first encounters<br>"
                "Mars' atmosphere and ionosphere. It's much closer to Mars (around 1.5 Mars radii)<br>"
                "compared to Earth's bow shock (around 15 Earth radii).<br>"
                "The Bow Shock points towards the Sun along the X-axis. The XY plane is the ecliptic."]
    
    bow_shock_customdata = ['Mars: Bow Shock']

    traces.append(
        go.Scatter3d(
            x=bow_shock_x,
            y=bow_shock_y,
            z=bow_shock_z,
            mode='markers',
            marker=dict(
                size=1.5,
                color='rgb(255, 200, 150)',  # Orange-ish color for bow shock
                opacity=0.2
            ),
            name='Mars: Bow Shock',
            text=bow_shock_text * len(bow_shock_x),
            customdata=bow_shock_customdata * len(bow_shock_x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    )
    
    # 3. Create localized crustal magnetic fields (unique to Mars)
    # Focus on southern hemisphere where most are found
    
    # Parameters for crustal magnetic anomalies
    n_anomalies = 7  # Number of distinct magnetic anomalies to show
    max_field_radius = 0.3 * MARS_RADIUS_AU  # Maximum extent of crustal fields from surface
    
    crustal_field_text = ["Crustal Magnetic Fields: Localized 'mini-magnetospheres' created by magnetized<br>"
                  "regions in Mars' crust, particularly in the southern hemisphere. These are remnants<br>"
                  "of Mars' ancient global magnetic field that existed billions of years ago."]
    
    crustal_field_customdata = ['Mars: Crustal Magnetic Fields']
    
    # Generate random positions for the anomalies, mostly in southern hemisphere
    np.random.seed(42)  # For reproducibility
    
    # Create localized magnetic field lines for each anomaly
    for i in range(n_anomalies):
        # Mostly in southern hemisphere (negative z)
        theta = np.random.uniform(0, np.pi*2)
        phi = np.random.uniform(np.pi/2, np.pi)  # Southern hemisphere
        
        # Position on the surface
        surf_x = MARS_RADIUS_AU * np.sin(phi) * np.cos(theta)
        surf_y = MARS_RADIUS_AU * np.sin(phi) * np.sin(theta)
        surf_z = MARS_RADIUS_AU * np.cos(phi)
        
        # Create field lines emanating from this point
        n_lines = 15
        points_per_line = 10
        
        field_x = []
        field_y = []
        field_z = []
        
        for j in range(n_lines):
            # Random direction from the surface point
            line_theta = np.random.uniform(0, np.pi*2)
            line_phi = np.random.uniform(0, np.pi)
            
            # Create points along the field line
            for k in range(points_per_line):
                # Distance from surface increases along the line
                dist = (k / points_per_line) * max_field_radius
                
                # Field lines curve back toward surface (dipole-like)
                curve_factor = 1.0 - (k / points_per_line) ** 2
                
                # Adjusted direction accounting for curvature
                adj_phi = line_phi * curve_factor
                
                # Calculate position
                x = surf_x + dist * np.sin(adj_phi) * np.cos(line_theta)
                y = surf_y + dist * np.sin(adj_phi) * np.sin(line_theta)
                z = surf_z + dist * np.cos(adj_phi)
                
                field_x.append(x)
                field_y.append(y)
                field_z.append(z)
        
        # Apply center position offset
        field_x = np.array(field_x) + center_x
        field_y = np.array(field_y) + center_y
        field_z = np.array(field_z) + center_z
        
        traces.append(
            go.Scatter3d(
                x=field_x,
                y=field_y,
                z=field_z,
                mode='markers',
                marker=dict(
                    size=1.5,
                    color='rgb(255, 100, 255)',  # Distinct purple color for crustal fields
                    opacity=0.3
                ),
                name='Mars: Crustal Magnetic Fields',
                text=crustal_field_text * len(field_x),
                customdata=crustal_field_customdata * len(field_x),
                hovertemplate='%{text}<extra></extra>',
                showlegend=i==0  # Only show in legend once
            )
        )
    
    sun_traces = create_sun_direction_indicator(
        center_position=center_position, 
        shell_radius=10 * MARS_RADIUS_AU
    )
    for trace in sun_traces:
        traces.append(trace)

    return traces

mars_hill_sphere_info = (
            "SET MANUAL SCALE TO AT LEAST 0.01 AU TO VISUALIZE.\n\n" 
            "Mars's Hill Sphere (extends to ~324.5 Mars radii or about 1.1 million km), which defines the region of its \n" 
            "gravitational influence and encompasses its two moons."
)

def create_mars_hill_sphere_shell(center_position=(0, 0, 0)):
    """Creates Mars's Hill sphere."""

    """Creates Mars's upper atmosphere shell."""
    # Define layer properties
    layer_info = {
        'radius_fraction': 324.5,  
        'color': 'rgb(0, 255, 0)',  # Green for Hill sphere
        'opacity': 0.15,
        'name': 'Hill Sphere',
        'description': (
                "Mars's Hill Sphere (extends to ~324.5 Mars radii or about 1.1 million km), which defines the region of its <br>" 
                "gravitational influence and encompasses its two moons.<br><br>" 
                "* Definition: The Hill sphere (sometimes called the Roche sphere or gravitational sphere of influence) of a <br>" 
                "  celestial body is the region around it where its own gravity is the dominant force attracting satellites. <br>" 
                "  Essentially, it's the space where a moon or spacecraft would primarily orbit that body rather than the larger <br>" 
                "  body it orbits (in Mars' case, the Sun).<br>" 
                "* Mars' Hill Sphere: The size of a planet's Hill sphere depends on its mass and its distance from the Sun. <br>" 
                "  Mars, being less massive than Earth and farther from the Sun, has a Hill sphere with a radius of approximately <br>" 
                "  1.1 million kilometers (about 0.073 astronomical units).<br>" 
                "* Moons Within the Hill Sphere: Mars' two small moons, Phobos and Deimos, orbit well within Mars' Hill sphere, <br>" 
                "  which is why they are gravitationally bound to the planet and not the Sun.<br>" 
                "* Importance: The concept of the Hill sphere is crucial for understanding the stability of orbits around a planet. <br>" 
                "  Any object orbiting Mars within its Hill sphere is more likely to remain a satellite of Mars. If an object's <br>" 
                "  orbit extends beyond the Hill sphere, the Sun's gravity would become the dominant influence, potentially pulling <br>" 
                "the object into a heliocentric orbit.<br><br>"
                "The Hill sphere is the region around a where its own gravity is the dominant force in attracting satellites. For <br>" 
                "a planet orbiting a star, it's the region where the planet's gravity is stronger than the star's tidal forces.<br><br>" 
                "The Hill Sphere radius can be described in words as follows: it is equal to the planet's average distance from the <br>" 
                "Sun (its orbital semi-major axis) multiplied by the cube root of the ratio between the planet's mass and three times <br>" 
                "the Sun's mass. In other words, you take how far the planet orbits out from the Sun, then scale that distance by the <br>" 
                "cube root of (planet mass ÷ [3 x solar mass]) to find the boundary within which the planet's gravity dominates over the Sun's."               
        )
    }

    # Hill sphere radius in Mars radii
    radius_fraction = 324.5  # Mars's Hill sphere is about 324.5 Mars radii
    
    # Calculate radius in AU
    radius_au = radius_fraction * MARS_RADIUS_AU
    
    # Create sphere points with fewer points for memory efficiency
    n_points = 30  # Reduced for large spheres
    x, y, z = create_sphere_points(radius_au, n_points=n_points)
    
    # Apply center position offset
    center_x, center_y, center_z = center_position
    x = x + center_x
    y = y + center_y
    z = z + center_z
    
    traces = [
        go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(
                size=1.0,
                color='rgb(0, 255, 0)',  # Green for Hill sphere
                opacity=0.25
            ),
            name=f"Mars: {layer_info['name']}",
            text=[layer_info['description']] * len(x),
            customdata=[f"Mars: {layer_info['name']}"] * len(x),
            hovertemplate='%{text}<extra></extra>',
            showlegend=True
        )
    ]
    
    sun_traces = create_sun_direction_indicator(
        center_position=center_position, 
        shell_radius=radius_au
    )
    for trace in sun_traces:
        traces.append(trace) 

    return traces